package com.train.ticket.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.train.ticket.exception.PassengerNotExistsException;
import com.train.ticket.exception.TicketAlreadyExistsException;
import com.train.ticket.exception.TicketNotExistsException;
import com.train.ticket.model.Ticket;
import com.train.ticket.service.TicketService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@RestController
@CrossOrigin("*")
@RequestMapping("/ticket")
public class TicketController {
	@Autowired
	private TicketService ticketService;
	
	@PostMapping("/ticket")
	public ResponseEntity<?> saveTicket(@RequestBody Ticket ticket) throws TicketAlreadyExistsException {
		System.out.println(ticket);
		try {
			return new ResponseEntity<Ticket>(ticketService.saveTicket(ticket), HttpStatus.CREATED);
		} catch (TicketAlreadyExistsException e) {
			throw new TicketAlreadyExistsException();
		} catch (Exception e) {
			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/tickets/{token}")
	public ResponseEntity<?> getTicketsByEmail(@PathVariable String token) throws TicketNotExistsException {
		Claims claim = Jwts.parser().setSigningKey("wipro123").parseClaimsJws(token).getBody();
		try {
			return new ResponseEntity<List<Ticket>>(ticketService.getTicketsByEmail(claim.getSubject()), HttpStatus.OK);
		} catch (TicketNotExistsException e) {
			throw new TicketNotExistsException();
		} catch (Exception e) {
			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/tickets")
	public ResponseEntity<?> getAllTickets() {
//		String name =request.getAttribute("claims").toString();
//        System.out.println(name);
		return new ResponseEntity<List<Ticket>>(ticketService.getAllTickets(), HttpStatus.OK);
	}
	
	@GetMapping("/ticket/{pnrNo}")
	public ResponseEntity<?> getById(@PathVariable String pnrNo) throws TicketNotExistsException {
		try {
			return new ResponseEntity<Ticket>(ticketService.findByPNRNo(pnrNo), HttpStatus.OK);
		} catch (TicketNotExistsException e) {
			throw new TicketNotExistsException();
		}catch (Exception e) {
			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
//	@PutMapping("/boarding")
//	public ResponseEntity<?> changeBoarding(@RequestBody Ticket ticket) throws TicketNotExistsException {
//		try {
//			return new ResponseEntity<Ticket>(ticketService.changeBoarding(ticket), HttpStatus.OK);
//		} catch (TicketNotExistsException e) {
//			throw new TicketNotExistsException();
//		}catch (Exception e) {
//			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
//		}
//	}
	
	@DeleteMapping("/{pnrNo}")
	public ResponseEntity<?> deleteTicket(@PathVariable String pnrNo) throws TicketNotExistsException {
		try {
			return new ResponseEntity<String>(ticketService.deleteTicket(pnrNo)?"Ticket is deleted":"", HttpStatus.OK);
		} catch (TicketNotExistsException e) {
			throw new TicketNotExistsException();
		}catch (Exception e) {
			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@DeleteMapping("/passenger/{pnrNo}/{passengerId}")
	public ResponseEntity<?> deletePassenger(@PathVariable String pnrNo, @PathVariable int passengerId) throws TicketNotExistsException {
		try {
			return new ResponseEntity<String>(ticketService.deletePassenger(pnrNo,passengerId)?"Ticket is deleted":"", HttpStatus.OK);
		} catch (TicketNotExistsException e) {
			throw new TicketNotExistsException();
		}catch (Exception e) {
			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@PutMapping("/update")
	public ResponseEntity<?> updatePassengers(@RequestBody Ticket ticket) throws TicketNotExistsException, PassengerNotExistsException {
		try {
			return new ResponseEntity<Ticket>(ticketService.updatePassengerDetails(ticket), HttpStatus.OK);
		}catch(PassengerNotExistsException e) {
			throw new PassengerNotExistsException();
		} catch (TicketNotExistsException e) {
			throw new TicketNotExistsException();
		}catch (Exception e) {
			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
//	@GetMapping("/get/{passengerId}")
//	public ResponseEntity<?> getPassengerById(@PathVariable int passengerId) throws TicketNotExistsException {
//		try {
//			return new ResponseEntity<>(ticketService.findByPassengerId(passengerId), HttpStatus.OK);
//		}catch (TicketNotExistsException e) {
//			throw new TicketNotExistsException();
//		}catch(Exception e) {
//			return new ResponseEntity<String>("Internal Server Error : "+e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
//		}
//	}
	
	@GetMapping("/get/email/{email}")
	public ResponseEntity<?> getByUserEmail(@PathVariable String email) {
		return new ResponseEntity<>(ticketService.getByUserEmail(email), HttpStatus.OK);
	}
}
